{%- set mst_name = get_rtl_name(mst_node) -%}
{%- set disp_name = get_rtl_name(disp_node) -%}
{%- set prefix_o = mst_name + "__" + disp_name -%}
{%- set prefix_i = disp_name + "__" + mst_name -%}
`include "field_attr.vh"
`default_nettype none
module {{mst_name}} (
    // APB interface to upstream SoC interconnect
    pclk,
    presetn,
    psel,
    penable,
    pready,
    pslverr,
    pwrite,
    paddr,
    pwdata,
    prdata,
    pprot,
    // error reporting interrupt
    err_intr,
    // reg_native_if to the downstream regdisp module
    {{prefix_o}}__req_vld,
    {{prefix_i}}__ack_vld,
    {{prefix_i}}__err,
    {{prefix_o}}__wr_en,
    {{prefix_o}}__rd_en,
    {{prefix_o}}__addr,
    {{prefix_o}}__wr_data,
    {{prefix_i}}__rd_data,
    {{prefix_o}}__non_sec,
    {{prefix_o}}__soft_rst
);
    `include "common_funcs.vh"

    parameter       ADDR_WIDTH          = {{get_addr_width(mst_node)}};
    parameter       DATA_WIDTH          = {{get_data_width(mst_node)}};
    localparam      DB_REG_NUM          = 5;

    input   logic                       pclk;
    input   logic                       presetn;
    input   logic                       psel;
    input   logic                       penable;
    output  logic                       pready;
    output  logic                       pslverr;
    input   logic                       pwrite;
    input   logic   [ADDR_WIDTH-1:0]    paddr;
    input   logic   [DATA_WIDTH-1:0]    pwdata;
    output  logic   [DATA_WIDTH-1:0]    prdata;
    input   logic   [2:0]               pprot;
    output  logic                       err_intr;
    output  logic                       {{prefix_o}}__req_vld;
    input   logic                       {{prefix_i}}__ack_vld;
    input   logic                       {{prefix_i}}__err;
    output  logic                       {{prefix_o}}__wr_en;
    output  logic                       {{prefix_o}}__rd_en;
    output  logic   [ADDR_WIDTH-1:0]    {{prefix_o}}__addr;
    output  logic   [DATA_WIDTH-1:0]    {{prefix_o}}__wr_data;
    input   logic   [DATA_WIDTH-1:0]    {{prefix_i}}__rd_data;
    output  logic                       {{prefix_o}}__non_sec;
    output  logic                       {{prefix_o}}__soft_rst;

    logic   [DB_REG_NUM-1:0]            dec_db_reg_sel;
    logic                               dec_ext_sel;
    logic 	                            dec_dummy_reg_sel;

    logic                               fsm_req_vld;
    logic                               fsm_ack_vld;
    logic                               fsm_wr_en;
    logic 	                            fsm_rd_en;
    logic   [ADDR_WIDTH-1:0]            fsm_addr;
    logic   [DATA_WIDTH-1:0]            fsm_wr_data;
    logic   [DATA_WIDTH-1:0]            fsm_rd_data;
    logic                               fsm_non_sec;

    logic   [DATA_WIDTH-1:0]            tmr_cnt;
    logic                               tmr_tmout;
    logic                               tmr_rst;

    logic   [31:0]                      db_regs_acc_addr__snap_0_wr_data;
    logic                               db_regs_acc_addr__snap_0_wr_en;
    logic                               db_regs_acc_addr__snap_0_rd_en;
    logic   [31:0]                      db_regs_acc_addr__snap_1_wr_data;
    logic                               db_regs_acc_addr__snap_1_wr_en;
    logic                               db_regs_acc_addr__snap_1_rd_en;
    logic   [31:0]                      db_regs_acc_addr__snap_0_o;
    logic   [31:0]                      db_regs_acc_addr__snap_1_o;
    logic   [63:0]                      db_regs_acc_addr_o;
    logic   [1:0]                       db_regs_acc_addr_snapshot_snap_wr_en;
    logic   [1:0]                       db_regs_acc_addr_snapshot_snap_rd_en;
    logic   [63:0]                      db_regs_acc_addr_snapshot_snap_wr_data;
    logic   [63:0]                      db_regs_acc_addr_snapshot_snap_rd_data;
    logic   [63:0]                      db_regs_acc_addr_snapshot_reg_wr_data;
    logic   [63:0]                      db_regs_acc_addr_snapshot_reg_rd_data;
    logic                               db_regs_acc_addr_snapshot_reg_wr_en;
    logic                               db_regs_acc_addr_snapshot_reg_rd_en;
    logic   [63:0]                      db_regs_acc_addr__val__next_value;
    logic                               db_regs_acc_addr__val__pulse;
    logic   [63:0]                      db_regs_acc_addr__val__curr_value;
    logic   [31:0]                      db_regs_tmr_thr_wr_data;
    logic                               db_regs_tmr_thr_wr_en;
    logic                               db_regs_tmr_thr_rd_en;
    logic   [31:0]                      db_regs_tmr_thr_o;
    logic   [31:0]                      db_regs_tmr_thr__cnt__curr_value;
    logic   [31:0]                      db_regs_stat_wr_data;
    logic                               db_regs_stat_wr_en;
    logic                               db_regs_stat_rd_en;
    logic   [31:0]                      db_regs_stat_o;
    logic                               db_regs_stat__soft_rst__curr_value;
    logic                               db_regs_stat__err_occur__next_value;
    logic                               db_regs_stat__err_occur__pulse;
    logic                               db_regs_stat__err_occur__curr_value;
    logic   [1:0]                       db_regs_stat__err_type__next_value;
    logic                               db_regs_stat__err_type__pulse;
    logic   [1:0]                       db_regs_stat__err_type__curr_value;
    logic                               db_regs_stat__acc_type__next_value;
    logic                               db_regs_stat__acc_type__pulse;
    logic                               db_regs_stat__acc_type__curr_value;
    logic                               db_regs_stat__intr_mask__curr_value;
    logic                               db_regs_stat__intr__next_value;
    logic                               db_regs_stat__intr__pulse;
    logic                               db_regs_stat__intr__curr_value;
    logic   [31:0]                      db_regs_ctrl_wr_data;
    logic                               db_regs_ctrl_wr_en;
    logic                               db_regs_ctrl_rd_en;
    logic   [31:0]                      db_regs_ctrl_o;
    logic   [1:0]                       db_regs_ctrl__err_resp_config__curr_value;

    logic                               downstream_err;
    logic                               pslverr_en;

    logic   [DB_REG_NUM:0] [DATA_WIDTH-1:0]     rd_split_mux_din_i0;
    logic   [DB_REG_NUM:0]                      rd_split_mux_sel_i0;
    logic                                       rd_split_mux_dout_vld_i0;
    logic                                       wr_sel_i0;
    logic                                       dummy_reg_rd_sel;
    logic                                       dummy_reg_wr_sel;
    logic   [DB_REG_NUM-1:0] [DATA_WIDTH-1:0]   db_reg_rd_data;
    logic   [DB_REG_NUM-1:0]                    db_reg_wr_sel;
    logic   [DB_REG_NUM-1:0]                    db_reg_rd_sel;
    logic                                       ack_vld_i0;
    logic   [DATA_WIDTH-1:0]                    rd_data_i0;

//****************************************ADDRESS DECODER************************************************//
    // distinguish access requests to:
    //      internel debug registers
    //      external regdisp module
    //      empty address slot (dummy register)
    localparam  DEC_ADDR_TRUNC_BITS = log2(DATA_WIDTH / 8);
    localparam  DEC_ADDR_REM_BITS = ADDR_WIDTH - DEC_ADDR_TRUNC_BITS;

    always_comb begin
        dec_db_reg_sel      = {DB_REG_NUM{1'b0}};
        dec_ext_sel         = 1'b0;
        dec_dummy_reg_sel   = 1'b0;

        if (fsm_req_vld) begin
            unique case (1'b1)
            {%- for child in mst_node.children(unroll=True, skip_not_present=False) %}
                {% if isinstance(child, AddrmapNode) -%}
                ((DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address)}} >> DEC_ADDR_TRUNC_BITS))
                <= fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] &&
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] <
                (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address+child.size)}} >> DEC_ADDR_TRUNC_BITS))):
                    dec_ext_sel = 1'b1;
                {%- elif isinstance(child, RegfileNode) -%}
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] == (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address)}} >> DEC_ADDR_TRUNC_BITS)):
                    dec_db_reg_sel[0] = 1'b1;
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] == (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address+4)}} >> DEC_ADDR_TRUNC_BITS)):
                    dec_db_reg_sel[1] = 1'b1;
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] == (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address+8)}} >> DEC_ADDR_TRUNC_BITS)):
                    dec_db_reg_sel[2] = 1'b1;
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] == (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address+12)}} >> DEC_ADDR_TRUNC_BITS)):
                    dec_db_reg_sel[3] = 1'b1;
                fsm_addr[ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] == (DEC_ADDR_REM_BITS'(64'h{{"%x"|format(child.absolute_address+16)}} >> DEC_ADDR_TRUNC_BITS)):
                    dec_db_reg_sel[4] = 1'b1;
                {% endif -%}
            {%- endfor -%}
                default: dec_dummy_reg_sel  = 1'b1;
            endcase
        end
    end

//*****************************************FSM INSTANCE************************************************//
    mst_fsm #(
        .ADDR_WIDTH(ADDR_WIDTH), .DATA_WIDTH(DATA_WIDTH)
    )
    mst_fsm (
        .pclk                   (pclk),
        .presetn                (presetn),
        .psel                   (psel),
        .penable                (penable),
        .pready                 (pready),
        .pslverr                (pslverr),
        .paddr                  (paddr),
        .pwrite                 (pwrite),
        .pwdata                 (pwdata),
        .prdata                 (prdata),
        .pprot                  (pprot),
        .pslverr_en             (pslverr_en),
        .fsm_req_vld            (fsm_req_vld),
        .fsm_ack_vld            (fsm_ack_vld),
        .fsm_addr               (fsm_addr),
        .fsm_wr_en              (fsm_wr_en),
        .fsm_rd_en              (fsm_rd_en),
        .fsm_wr_data            (fsm_wr_data),
        .fsm_rd_data            (fsm_rd_data),
        .fsm_non_sec            (fsm_non_sec),
        .downstream_err         (downstream_err),
        .tmr_tmout              (tmr_tmout),
        .tmr_rst                (tmr_rst)
    );

//*******************************************TIMER*****************************************************//
    always_ff @(posedge pclk or negedge presetn) begin
        if (!presetn)
            tmr_cnt <= {DATA_WIDTH{1'b0}};
        else if (tmr_rst)
            tmr_cnt <= {DATA_WIDTH{1'b0}};
        else if (tmr_cnt < db_regs_tmr_thr_o)
            tmr_cnt <= tmr_cnt + 1'b1;
    end

//*******************************************EVENT RECORD**********************************************//
    assign  tmr_tmout           = (tmr_cnt == db_regs_tmr_thr_o);
    assign  downstream_err      = {{prefix_i}}__err;

//******************************************DEBUG REGISTERS********************************************//
    // debug register: db_regs_acc_addr ({{bus_addr_width}}-bit)
    // description:
    //      address of the access where timeout event occurs
    // absolute address:
    // base offset:
    // reset value: 0x0
    // include 2 snapshot registers:
    //      snapshot register 0: db_regs_acc_addr__snap_0
    //          absolute address:
    //          base offset:
    //      snapshot register 1: db_regs_acc_addr__snap_1
    //          absolute address:
    //          base offset:
    field #(
        .F_WIDTH                (64),
        .ARST_VALUE             (64'h0),
        .SW_TYPE                ({`SW_RO}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_acc_addr__val (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_acc_addr_snapshot_reg_wr_data[63:0]),
        .sw_rd                  (db_regs_acc_addr_snapshot_reg_rd_en),
        .sw_wr                  (db_regs_acc_addr_snapshot_reg_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (db_regs_acc_addr__val__next_value),
        .hw_pulse               (db_regs_acc_addr__val__pulse),
        .field_value            (db_regs_acc_addr__val__curr_value)
    );
    assign  db_regs_acc_addr__val__pulse        = fsm_req_vld;

    always_comb begin
        db_regs_acc_addr__val__next_value                   = 64'h0;
        db_regs_acc_addr__val__next_value[ADDR_WIDTH-1:0]   = fsm_addr;
    end

    always_comb begin
        db_regs_acc_addr_o[63:0]     = 64'h0;
        db_regs_acc_addr_o[63:0]     = db_regs_acc_addr__val__curr_value;
    end

    assign  db_regs_acc_addr_snapshot_reg_rd_data    = db_regs_acc_addr_o;

    assign  db_regs_acc_addr_snapshot_snap_wr_en     = {db_regs_acc_addr__snap_1_wr_en, db_regs_acc_addr__snap_0_wr_en};
    assign  db_regs_acc_addr_snapshot_snap_rd_en     = {db_regs_acc_addr__snap_1_rd_en, db_regs_acc_addr__snap_0_rd_en};
    assign  db_regs_acc_addr_snapshot_snap_wr_data   = {db_regs_acc_addr__snap_1_wr_data, db_regs_acc_addr__snap_0_wr_data};
    assign  {db_regs_acc_addr__snap_1_o, db_regs_acc_addr__snap_0_o}  = db_regs_acc_addr_snapshot_snap_rd_data;

    snapshot_reg #(.DATA_WIDTH(32), .REG_WIDTH(64))
    db_regs_acc_addr_snapshot (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .soft_rst               (1'b0),
        .snap_wr_en             (db_regs_acc_addr_snapshot_snap_wr_en),
        .snap_rd_en             (db_regs_acc_addr_snapshot_snap_rd_en),
        .snap_wr_data           (db_regs_acc_addr_snapshot_snap_wr_data),
        .snap_rd_data           (db_regs_acc_addr_snapshot_snap_rd_data),
        .reg_wr_en              (db_regs_acc_addr_snapshot_reg_wr_en),
        .reg_rd_en              (db_regs_acc_addr_snapshot_reg_rd_en),
        .reg_wr_data            (db_regs_acc_addr_snapshot_reg_wr_data),
        .reg_rd_data            (db_regs_acc_addr_snapshot_reg_rd_data)
    );

    // debug register: db_regs_tmr_thr (32-bit)
    // description:
    //      overflow threshold of the timer that
    //      counts for access cycles since regmst receives an APB transaction
    // absolute address:
    // base offset:
    // reset value: 0xffff
    field #(
        .F_WIDTH                (32),
        .ARST_VALUE             (32'hffff),
        .SW_TYPE                ({`SW_RW}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_tmr_thr__cnt (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_tmr_thr_wr_data[31:0]),
        .sw_rd                  (db_regs_tmr_thr_rd_en),
        .sw_wr                  (db_regs_tmr_thr_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (32'b0),
        .hw_pulse               (1'b0),
        .field_value            (db_regs_tmr_thr__cnt__curr_value)
    );

    always_comb begin
        db_regs_tmr_thr_o[31:0]      = 32'h0;
        db_regs_tmr_thr_o[31:0]      = db_regs_tmr_thr__cnt__curr_value;
    end

    // debug register: db_regs_stat
    // description:
    //      record status.
    // field:
    //      0:0 soft_rst,
    //      1:1 err_occur,
    //      3:2 err_type,
    //      4:4 acc_type,
    //      6:6 intr_mask,
    //      7:7 intr
    // absolute address:
    // base offset:
    // reset value: 0x0

    // field: soft_rst
    field #(
        .F_WIDTH                (1),
        .ARST_VALUE             (1'h0),
        .SW_TYPE                ({`SW_RW}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW),
        .PULSE                  ({1'b1}))
    x__db_regs_stat__soft_rst (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[0:0]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (1'b0),
        .hw_pulse               (1'b0),
        .field_value            (db_regs_stat__soft_rst__curr_value)
    );
    assign  {{prefix_o}}__soft_rst          = db_regs_stat__soft_rst__curr_value;

    // field: err_occur
    field #(
        .F_WIDTH                (1),
        .ARST_VALUE             (1'h0),
        .SW_TYPE                ({`SW_RO}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_stat__err_occur (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[1:1]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (db_regs_stat__err_occur__next_value),
        .hw_pulse               (db_regs_stat__err_occur__pulse),
        .field_value            (db_regs_stat__err_occur__curr_value)
    );
    assign  db_regs_stat__err_occur__pulse           = tmr_tmout | downstream_err;
    assign  db_regs_stat__err_occur__next_value      = db_regs_stat__err_occur__pulse;

    // field: err_type
    //  0b00: no error
    //  0b01: downstream slave error (might be decode error or secure access error)
    //  0b11: access timeout
    field #(
        .F_WIDTH                (2),
        .ARST_VALUE             (2'h0),
        .SW_TYPE                ({`SW_RO}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_stat__err_type (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[3:2]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (db_regs_stat__err_type__next_value),
        .hw_pulse               (db_regs_stat__err_type__pulse),
        .field_value            (db_regs_stat__err_type__curr_value)
    );
    assign  db_regs_stat__err_type__pulse           = db_regs_stat__err_occur__pulse;
    assign  db_regs_stat__err_type__next_value      = tmr_tmout ? 2'b11 : {1'b0, downstream_err};

    // field: acc_type
    field #(
        .F_WIDTH                (1),
        .ARST_VALUE             (1'h0),
        .SW_TYPE                ({`SW_RO}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_stat__acc_type (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[4:4]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (db_regs_stat__acc_type__next_value),
        .hw_pulse               (db_regs_stat__acc_type__pulse),
        .field_value            (db_regs_stat__acc_type__curr_value)
    );
    assign  db_regs_stat__acc_type__pulse           = fsm_wr_en;
    assign  db_regs_stat__acc_type__next_value      = fsm_wr_en;

    // field: intr_mask
    field #(
        .F_WIDTH                (1),
        .ARST_VALUE             (1'h0),
        .SW_TYPE                ({`SW_RW}),
        .HW_TYPE                (`HW_RO),
        .PRECEDENCE             (`SW))
    x__db_regs_stat__intr_mask (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[6:6]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (1'b0),
        .hw_pulse               (1'b0),
        .field_value            (db_regs_stat__intr_mask__curr_value)
    );

    // field: intr
    field #(
        .F_WIDTH                (1),
        .ARST_VALUE             (1'h0),
        .SW_TYPE                ({`SW_RW}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_stat__intr (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_stat_wr_data[7:7]),
        .sw_rd                  (db_regs_stat_rd_en),
        .sw_wr                  (db_regs_stat_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (db_regs_stat__intr__next_value),
        .hw_pulse               (db_regs_stat__intr__pulse),
        .field_value            (db_regs_stat__intr__curr_value)
    );
    assign  db_regs_stat__intr__pulse       = db_regs_stat__err_occur__pulse;
    assign  db_regs_stat__intr__next_value  = db_regs_stat__intr__pulse;

    assign  err_intr            = (db_regs_ctrl__err_resp_config__curr_value == 2'h1) ?
        (db_regs_stat__intr__curr_value & ~db_regs_stat__intr_mask__curr_value) : 1'b0;

    always_comb begin
        db_regs_stat_o[31:0]    = 32'h0;
        db_regs_stat_o[7:7]     = db_regs_stat__intr__curr_value;
        db_regs_stat_o[6:6]     = db_regs_stat__intr_mask__curr_value;
        db_regs_stat_o[4:4]     = db_regs_stat__acc_type__curr_value;
        db_regs_stat_o[3:2]     = db_regs_stat__err_type__curr_value;
        db_regs_stat_o[1:1]     = db_regs_stat__err_occur__curr_value;
        db_regs_stat_o[0:0]     = db_regs_stat__soft_rst__curr_value;
    end

    // debug register: ctrl
    field #(
        .F_WIDTH                (2),
        .ARST_VALUE             (2'h0),
        .SW_TYPE                ({`SW_RW}),
        .HW_TYPE                (`HW_RW),
        .PRECEDENCE             (`SW))
    x__db_regs_ctrl__err_resp_config (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .sync_rst               (1'b0),
        .sw_wr_data             (db_regs_ctrl_wr_data[1:0]),
        .sw_rd                  (db_regs_ctrl_rd_en),
        .sw_wr                  (db_regs_ctrl_wr_en),
        .swmod_out              (),
        .swacc_out              (),
        .hw_value               (2'h0),
        .hw_pulse               (1'h0),
        .field_value            (db_regs_ctrl__err_resp_config__curr_value)
    );

    assign pslverr_en           = db_regs_ctrl__err_resp_config__curr_value == 2'h2;

    always_comb begin
        db_regs_ctrl_o[31:0]    = 32'h0;
        db_regs_ctrl_o[1:0]     = db_regs_ctrl__err_resp_config__curr_value;
    end


//*************************INTERNAL/EXTERNAL MUX/IMUX INSTANCE*****************************************//
    // internal register multiplexor: rd_data and ack_vld from debug registers
    assign  db_reg_rd_data[0]           = db_regs_acc_addr__snap_0_o;
    assign  db_reg_rd_data[1]           = db_regs_acc_addr__snap_1_o;
    assign  db_reg_rd_data[2]           = db_regs_tmr_thr_o;
    assign  db_reg_rd_data[3]           = db_regs_stat_o;
    assign  db_reg_rd_data[4]           = db_regs_ctrl_o;

    assign  rd_split_mux_din_i0         = {db_reg_rd_data, {DATA_WIDTH{1'b0}}};
    assign  rd_split_mux_sel_i0         = {db_reg_rd_sel, dummy_reg_rd_sel};
    assign  wr_sel_i0                   = (| db_reg_wr_sel) | dummy_reg_wr_sel;
    split_mux_2d #(
        .WIDTH(DATA_WIDTH), .CNT(DB_REG_NUM+1),
        .GROUP_SIZE(128), .SKIP_DFF_0(1), .SKIP_DFF_1(1))
    int_rd_split_mux (
        .clk                    (pclk),
        .rst_n                  (presetn),
        .din                    (rd_split_mux_din_i0),
        .sel                    (rd_split_mux_sel_i0),
        .dout                   (rd_data_i0),
        .dout_vld               (rd_split_mux_dout_vld_i0));

    assign  ack_vld_i0          = rd_split_mux_dout_vld_i0 | wr_sel_i0;

    // internal register inverse multiplexor to debug registers
    assign  db_reg_wr_sel       = {DB_REG_NUM{fsm_wr_en}} & dec_db_reg_sel;
    assign  db_reg_rd_sel       = {DB_REG_NUM{fsm_rd_en}} & dec_db_reg_sel;
    assign  dummy_reg_rd_sel    = dec_dummy_reg_sel & fsm_rd_en;
    assign  dummy_reg_wr_sel    = dec_dummy_reg_sel & fsm_wr_en;

    assign  db_regs_acc_addr__snap_0_wr_data    = db_reg_wr_sel[0] ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  db_regs_acc_addr__snap_0_wr_en      = db_reg_wr_sel[0];
    assign  db_regs_acc_addr__snap_0_rd_en      = db_reg_rd_sel[0];

    assign  db_regs_acc_addr__snap_1_wr_data    = db_reg_wr_sel[1] ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  db_regs_acc_addr__snap_1_wr_en      = db_reg_wr_sel[1];
    assign  db_regs_acc_addr__snap_1_rd_en      = db_reg_rd_sel[1];

    assign  db_regs_tmr_thr_wr_data             = db_reg_wr_sel[2] ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  db_regs_tmr_thr_wr_en               = db_reg_wr_sel[2];
    assign  db_regs_tmr_thr_rd_en               = db_reg_rd_sel[2];

    assign  db_regs_stat_wr_data                = db_reg_wr_sel[3] ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  db_regs_stat_wr_en                  = db_reg_wr_sel[3];
    assign  db_regs_stat_rd_en                  = db_reg_rd_sel[3];

    assign  db_regs_ctrl_wr_data                = db_reg_wr_sel[4] ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  db_regs_ctrl_wr_en                  = db_reg_wr_sel[4];
    assign  db_regs_ctrl_rd_en                  = db_reg_rd_sel[4];

    // ultimate multiplexor to mst_fsm: ack_vld, rd_data, err
    assign  fsm_rd_data                 = ack_vld_i0 ? rd_data_i0 : ({{prefix_i}}__ack_vld ? {{prefix_i}}__rd_data : {DATA_WIDTH{1'b0}});
    assign  fsm_ack_vld                 = ack_vld_i0 | {{prefix_i}}__ack_vld;

    // ultimate inverse multiplexor: to the external downstream regdisp module
    assign  {{prefix_o}}__req_vld       = fsm_req_vld & dec_ext_sel;
    assign  {{prefix_o}}__wr_en         = fsm_wr_en & dec_ext_sel;
    assign  {{prefix_o}}__rd_en         = fsm_rd_en & dec_ext_sel;
    assign  {{prefix_o}}__addr          = dec_ext_sel ? fsm_addr : {ADDR_WIDTH{1'b0}};
    assign  {{prefix_o}}__wr_data       = dec_ext_sel ? fsm_wr_data : {DATA_WIDTH{1'b0}};
    assign  {{prefix_o}}__non_sec       = dec_ext_sel & fsm_non_sec;
endmodule
`default_nettype wire