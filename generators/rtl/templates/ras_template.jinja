{%- set addr_list = get_property(slv_node, "addr_list") -%}
{%- set addr_loc_num = get_addr_loc_num(slv_node) -%}
`include "field_attr.vh"
`default_nettype none

module {{slv_name}} (
    clk,
    rst_n,
    soft_rst,
    req_vld,
    wr_en,
    rd_en,
    addr,
    wr_data,
    rd_data,
    non_sec,
    ack_vld,
    err,
    // indicate whether to report error when accessing undefined empty address space,
    // or non-secure access, at native clock domain (clk)
    error_report_en,
    // indicate whether this regslv is in secure space, at native clock domain (clk)
    domain_is_non_secure,
{%- if has_cdc(slv_node) %}
    regslv_clk,
    regslv_rst_n,
{%- endif %}
{%- for node in slv_node.children(unroll=True, skip_not_present=False) if isinstance(node, RegfileNode) %}
{%- set node_name = get_inst_name(node) %}
{%- for record in node.children(unroll=True, skip_not_present=False) %}
{%- set record_name = get_inst_name(record) %}
    {{node_name}}_{{record_name}}__plus,
    {{node_name}}_{{record_name}}__plus_value,
    {{node_name}}_{{record_name}}__interrupt,
    {{node_name}}_{{record_name}}__poi_err_addr,
    {{node_name}}_{{record_name}}__poi_err_info,
{%- endfor %}{# record loop #}
{%- endfor %}{# node loop #}
    fault_int
);
    `include "common_funcs.vh"

    `define SERR_NO_ERR     8'h00
    `define SERR_IMP_DEF    8'h01
    `define SERR_ECC        8'h02
    `define SERR_POIS       8'h15

    `define UET_IS_UEU      2'b01
    `define UET_IS_UER      2'b11
    `define UET_IS_NOERR    2'b00
{%- for node in slv_node.children(unroll=True, skip_not_present=False) if isinstance(node, RegfileNode) %}
{%- set node_name = get_inst_name(node) %}
{%- for record in node.children(unroll=True, skip_not_present=False) %}
{%- set record_name = get_inst_name(record) %}
    parameter   [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_INTR_TYPE   = 32'h0;
    parameter   [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_IS_ECC      = 32'h0;
    parameter   [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_IS_UEU      = 32'h0;
    parameter   [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_IS_POIS     = 32'h0;

    localparam  [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_NOT_IMP_DEF =
        {{node_name|upper}}_{{record_name|upper}}_P_IS_ECC | {{node_name|upper}}_{{record_name|upper}}_P_IS_UEU | {{node_name|upper}}_{{record_name|upper}}_P_IS_POIS;
    localparam  [31:0]      {{node_name|upper}}_{{record_name|upper}}_P_IS_IMP_DEF  = ~{{node_name|upper}}_{{record_name|upper}}_P_NOT_IMP_DEF;
{%- endfor %}{# record loop #}
{% endfor %}{# node loop #}
    parameter               CDC_ENABLE          = {{has_cdc(slv_node)}};
    parameter               SECURE_ACCESS_CHECK = 1;
    parameter               ADDR_WIDTH          = {{get_addr_width(slv_node)}};
    parameter               DATA_WIDTH          = {{get_data_width(slv_node)}};
    parameter               INSERT_REG_FF       = 1;
    parameter               REG_NUM             = {{addr_loc_num}};

    input   logic                               clk;
    input   logic                               rst_n;
    input   logic                               soft_rst;
    input   logic                               req_vld;
    input   logic                               wr_en;
    input   logic                               rd_en;
    input   logic   [ADDR_WIDTH-1:0]            addr;
    input   logic   [DATA_WIDTH-1:0]            wr_data;
    output  logic   [DATA_WIDTH-1:0]            rd_data;
    input   logic                               non_sec;
    output  logic                               ack_vld;
    output  logic                               err;
    input   logic                               error_report_en;
    input   logic                               domain_is_non_secure;
{%- if has_cdc(slv_node) %}
    input   logic                               regslv_clk;
    input   logic                               regslv_rst_n;
{%- endif %}
{%- for node in slv_node.children(unroll=True, skip_not_present=False) if isinstance(node, RegfileNode) %}
{%- set node_name = get_inst_name(node) %}
{%- for record in node.children(unroll=True, skip_not_present=False) %}
{%- set record_name = get_inst_name(record) %}
    input   logic                               {{node_name}}_{{record_name}}__plus;
    input   logic   [6:0]                       {{node_name}}_{{record_name}}__plus_value;
    input   logic   [31:0]                      {{node_name}}_{{record_name}}__interrupt;
    input   logic   [55:0]                      {{node_name}}_{{record_name}}__poi_err_addr;
    input   logic   [31:0]                      {{node_name}}_{{record_name}}__poi_err_info;
{%- endfor %}{# record loop #}
{%- endfor %}{# node loop #}
    output  logic                               fault_int;

    logic                                       req_vld_i0;
    logic                                       wr_en_i0;
    logic                                       rd_en_i0;
    logic   [ADDR_WIDTH-1:0]                    addr_i0;
    logic   [DATA_WIDTH-1:0]                    wr_data_i0;
    logic                                       soft_rst_i0;
    logic   [DATA_WIDTH-1:0]                    rd_data_i0;
    logic                                       ack_vld_i0;
    logic                                       err_i0;
    logic   [REG_NUM-1:0] [DATA_WIDTH-1:0]      reg_sw_rd_data;
    logic   [REG_NUM-1:0] [DATA_WIDTH-1:0]      reg_rd_data_mux_din;
    logic   [REG_NUM-1:0]                       reg_rd_data_mux_sel;
    logic   [DATA_WIDTH-1:0]                    reg_rd_data_mux_dout;
    logic                                       reg_rd_data_mux_dout_vld;
    logic                                       reg_rd_data_vld;
    logic   [DATA_WIDTH-1:0]                    reg_rd_data;
{%- if has_cdc(slv_node) -%}
{%- set curr_clk = "regslv_clk" -%}
{%- set curr_async_rst_n = "regslv_rst_n" -%}
{% else %}
{%- set curr_clk = "clk" -%}
{%- set curr_async_rst_n = "rst_n" -%}
{%- endif %}

//************************************SECURE_ACCESS_CHECK*********************************************//
//***********************************CLOCK DOMAIN CROSSING********************************************//
    reg_native_if_1to1 #(
        .CDC_ENABLE                             (CDC_ENABLE),
        .BUS_ADDR_WIDTH                         (ADDR_WIDTH),
        .BUS_DATA_WIDTH                         (DATA_WIDTH),
        .SECURE_ACCESS_CHECK                    (SECURE_ACCESS_CHECK)
    )
    reg_native_if_1to1 (
        .native_clk                             (clk),
        .native_rst_n                           (rst_n),
        .soft_rst                               (soft_rst),
        .req_vld                                (req_vld),
        .ack_vld                                (ack_vld),
        .err                                    (err),
        .addr                                   (addr),
        .wr_en                                  (wr_en),
        .rd_en                                  (rd_en),
        .wr_data                                (wr_data),
        .rd_data                                (rd_data),
        .non_sec                                (non_sec),
        .ext_clk                                ({{curr_clk}}),
        .ext_rst_n                              ({{curr_async_rst_n}}),
        .ext_soft_rst                           (soft_rst_i0),
        .ext_req_vld                            (req_vld_i0),
        .ext_ack_vld                            (ack_vld_i0),
        .ext_err                                (err_i0),
        .ext_addr                               (addr_i0),
        .ext_wr_en                              (wr_en_i0),
        .ext_rd_en                              (rd_en_i0),
        .ext_wr_data                            (wr_data_i0),
        .ext_rd_data                            (rd_data_i0),
        .ext_non_sec                            (),
        .domain_is_non_secure                   (domain_is_non_secure),
        .error_report_en                        (error_report_en)
    );

//**************************************ADDRESS DECODER***********************************************//
    localparam  ADDR_TRUNC_BITS                 = log2(DATA_WIDTH / 8);
    localparam  ADDR_REM_BITS                   = ADDR_WIDTH - ADDR_TRUNC_BITS;

    logic   [REG_NUM-1:0]                       dec_reg_sel;
    logic                                       dec_dummy_sel;
    logic                                       reg_acc;
    logic                                       dummy_acc;
    logic   [REG_NUM-1:0]                       reg_sw_wr_sel;
    logic   [REG_NUM-1:0]                       reg_sw_rd_sel;
    logic   [DATA_WIDTH-1:0]                    reg_sw_wr_data;

    always_comb begin
        if (req_vld_i0 & ~soft_rst_i0) begin
            dec_reg_sel = {REG_NUM{1'b0}};
            dec_dummy_sel = 1'b0;

            unique case (addr_i0[ADDR_WIDTH-1:ADDR_TRUNC_BITS])
                {%- for addr in addr_list %}
                (ADDR_REM_BITS'(64'h{{"%x"|format(addr)}} >> ADDR_TRUNC_BITS)): dec_reg_sel[{{loop.index0}}] = 1'b1;
                {%- endfor %}
                default: dec_dummy_sel = 1'b1;
            endcase
        end
        else begin
            dec_reg_sel = {REG_NUM{1'b0}};
            dec_dummy_sel = 1'b0;
        end
    end

    generate
        if (INSERT_REG_FF) begin: g_reg_ff
            always_ff @(posedge {{curr_clk}} or negedge {{curr_async_rst_n}}) begin
                if (~{{curr_async_rst_n}}) begin
                    reg_sw_wr_sel               <= {REG_NUM{1'b0}};
                    reg_sw_rd_sel               <= {REG_NUM{1'b0}};
                    reg_sw_wr_data              <= {DATA_WIDTH{1'b0}};
                    dummy_acc                   <= 1'b0;
                end
                else if (soft_rst_i0) begin
                    reg_sw_wr_sel               <= {REG_NUM{1'b0}};
                    reg_sw_rd_sel               <= {REG_NUM{1'b0}};
                    reg_sw_wr_data              <= {DATA_WIDTH{1'b0}};
                    dummy_acc                   <= 1'b0;
                end
                else begin
                    reg_sw_wr_sel               <= {REG_NUM{wr_en_i0}} & dec_reg_sel;
                    reg_sw_rd_sel               <= {REG_NUM{rd_en_i0}} & dec_reg_sel;
                    reg_sw_wr_data              <= wr_data_i0;
                    dummy_acc                   <= dec_dummy_sel;
                end
            end
        end
        else begin: g_no_reg_ff
            assign  reg_sw_wr_sel               = {REG_NUM{wr_en_i0}} & dec_reg_sel;
            assign  reg_sw_rd_sel               = {REG_NUM{rd_en_i0}} & dec_reg_sel;
            assign  reg_sw_wr_data              = wr_data_i0;
            assign  dummy_acc                   = dec_dummy_sel;
        end
    endgenerate

    assign  reg_acc                             = (|reg_sw_wr_sel) | (|reg_sw_rd_sel);

//*******************************************FSM******************************************************//
    slv_fsm #(
        .DATA_WIDTH (DATA_WIDTH)
    )
    slv_fsm (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .if_soft_rst                            (soft_rst_i0),
        .if_req_vld                             (req_vld_i0),
        .if_ack_vld                             (ack_vld_i0),
        .if_rd_data                             (rd_data_i0),
        .if_err                                 (err_i0),
        .if_wr_en                               (wr_en_i0),
        .if_rd_en                               (rd_en_i0),
        .dummy_acc                              (dummy_acc),
        .reg_acc                                (reg_acc),
        .reg_rd_data                            (reg_rd_data),
        .reg_rd_data_vld                        (reg_rd_data_vld)
    );

//*************************************NODES AND RECORDS**********************************************//
{%- set int_reg_idx = get_property(slv_node, "int_reg_idx") %}
{%- set record_cnt, reg_cnt = [0], [0] %}
{%- set ss_info = [] %}
    logic   [55:0]                              err_gsr_s;
{%- for node in slv_node.children(unroll=True, skip_not_present=False) %}
{%- if isinstance(node, RegfileNode) %}
{%- set node_name = get_inst_name(node) %}
    {%- if loop.first %}
    logic   {{"[%2s:0]"|format(loop.length-3) ~ " "*30}}fault_int_n;
    {%- endif %}
    //****************************************************************************************//
    // RAS Node {{loop.index0}}: {{node_name}}
    // Size: {{node.size}}
    // Address Offset: {{"0x%X"|format(node.absolute_address-slv_node.absolute_address)}}
    //****************************************************************************************//
{%- set node_loop = loop %}
{%- for record in node.children(unroll=True, skip_not_present=False) %}
{%- set record_name = get_inst_name(record) %}
    {%- if loop.first %}
    logic   {{"[%2s:0]"|format(loop.length-1) ~ " "*30}}{{node_name}}__fault_int_r;
    {%- endif %}
    //**********************************************************************************//
    // RAS Record (index {{loop.index0}} in current node): {{record_name}}
    // Size: {{node.size}}
    // Address Offset: {{"0x%X"|format(record.absolute_address-slv_node.absolute_address)}}
    //**********************************************************************************//
{%- set record_loop = loop %}
    {%- if loop.first %}
    logic                                       {{node_name}}__ctrl_fi;
    logic                                       {{node_name}}__ctrl_cfi;
    {%- endif %}
    logic                                       {{node_name}}_{{record_name}}__plus_f;
    logic                                       {{node_name}}_{{record_name}}__of_flag;
    logic   [7:0]                               {{node_name}}_{{record_name}}__cec_wd_cnt;
    logic                                       {{node_name}}_{{record_name}}__cec_wd_cnt_of;
    logic   [43:0]                              {{node_name}}_{{record_name}}__wd_step_cnt;
    logic                                       {{node_name}}_{{record_name}}__wd_step_cnt_of;
    logic   [7:0]                               {{node_name}}_{{record_name}}__cec_upd_value;
    logic                                       {{node_name}}_{{record_name}}__of_fault;
    logic   [31:0]                              {{node_name}}_{{record_name}}__int_fault;
    logic                                       {{node_name}}_{{record_name}}__fault;
    logic                                       {{node_name}}_{{record_name}}__fim_of;
    logic   [31:0]                              {{node_name}}_{{record_name}}__fim_int;
    logic   [31:0]                              {{node_name}}_{{record_name}}__fen;
    logic                                       {{node_name}}_{{record_name}}__fmask;
    logic   [31:0]                              {{node_name}}_{{record_name}}__int_flag;
    logic                                       {{node_name}}_{{record_name}}__or_all_int_flag;
    logic                                       {{node_name}}_{{record_name}}__pn;
    logic                                       {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    logic                                       {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    logic   [191:0]                             {{node_name}}_{{record_name}}__ss_reg_sw_wr_data;
    logic   [191:0]                             {{node_name}}_{{record_name}}__ss_reg_sw_rd_data;
{%- for reg in record.registers(unroll=True, skip_not_present=False) %}
{%- set reg_name = get_rtl_name(reg) %}
{%- set reg_idx = int_reg_idx[reg_cnt[0]] %}
{%- if reg_cnt.append(reg_cnt.pop() + 1) %}{% endif %}
    //****************************************************************************//
    // Register: {{get_inst_name(reg)}}
    // Size: {{reg.size}} bytes
    // Address Offset: {{"0x%X"|format(reg.absolute_address-slv_node.absolute_address)}}
    //****************************************************************************//
    logic                                       {{reg_name}}__sw_wr_en;
    logic                                       {{reg_name}}__sw_rd_en;
    logic   {{"[%2s:0]"|format(reg.size*8-1)}}  {{" " * 28}}{{reg_name}}__sw_wr_data;
    logic   {{"[%2s:0]"|format(reg.size*8-1)}}  {{" " * 28}}{{reg_name}}__sw_rd_data;
{%- for field in reg.fields(skip_not_present=False) %}
{%- if field.is_hw_readable or field.is_sw_readable %}
    logic   {{"[%2s:0]"|format(field.width-1)}} {{" " * 29}}{{reg_name}}__{{field.inst_name}}__curr_value;
{%- endif %}
{%- if field.is_hw_writable %}
    {%- if reg.type_name == "ERR_MISC0_0" and field.type_name == "IS" %}
    logic   {{"[%2s:0]"|format(field.width-1) ~ " "*30}}{{reg_name}}__{{field.inst_name}}__pulse;
    {%- else %}
    logic                                       {{reg_name}}__{{field.inst_name}}__pulse;
    {%- endif %}
    logic   {{"[%2s:0]"|format(field.width-1) ~ " "*30}}{{reg_name}}__{{field.inst_name}}__next_value;
{%- endif %}
{%- endfor %}{# field loop #}
{# snapshot register for STATUS_0, MISC0_0, MISC0_1 #}
{%- if reg.type_name == "ERR_STATUS_0" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[31:0];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[31:0] = {{reg_name}}__sw_rd_data;
{%- elif reg.type_name == "ERR_MISC0_0" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[63:32];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[63:32] = {{reg_name}}__sw_rd_data;
{%- elif reg.type_name == "ERR_MISC0_1" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[95:64];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[95:64] = {{reg_name}}__sw_rd_data;
{%- elif reg.type_name == "ERR_ADDR_0" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[127:96];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[127:96] = {{reg_name}}__sw_rd_data;
{%- elif reg.type_name == "ERR_ADDR_1" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[159:128];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[159:128] = {{reg_name}}__sw_rd_data;
{%- elif reg.type_name == "ERR_MISC3_1" %}
    {% if ss_info.append(reg_idx[0]) %}{% endif -%}
    assign  {{reg_name}}__sw_wr_en = {{node_name}}_{{record_name}}__ss_reg_sw_wr_en;
    assign  {{reg_name}}__sw_rd_en = {{node_name}}_{{record_name}}__ss_reg_sw_rd_en;
    assign  {{reg_name}}__sw_wr_data = {{node_name}}_{{record_name}}__ss_reg_sw_wr_data[191:160];
    assign  {{node_name}}_{{record_name}}__ss_reg_sw_rd_data[191:160] = {{reg_name}}__sw_rd_data;

    snapshot_reg #(
        .DATA_WIDTH                             (DATA_WIDTH),
        .REG_WIDTH                              (192)
    )
    {{node_name}}_{{record_name}}__ss_reg (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .soft_rst                               (soft_rst_i0),
        .snap_wr_en                             ({
                                                    {%- for i in range(5,-1,-1) -%}
                                                    reg_sw_wr_sel[{{ss_info[i]}}]{{", " if not loop.last}}
                                                    {%- endfor -%}
                                                }),
        .snap_rd_en                             ({
                                                    {%- for i in range(5,-1,-1) -%}
                                                    reg_sw_rd_sel[{{ss_info[i]}}]{{", " if not loop.last}}
                                                    {%- endfor -%}
                                                }),
        .snap_wr_data                           ({6{reg_sw_wr_data}}),
        .snap_rd_data                           ({
                                                    {%- for i in range(5,-1,-1) -%}
                                                    reg_sw_rd_data[{{ss_info[i]}}]{{", " if not loop.last}}
                                                    {%- endfor -%}
                                                }),
        .reg_wr_en                              ({{node_name}}_{{record_name}}__ss_reg_sw_wr_en),
        .reg_rd_en                              ({{node_name}}_{{record_name}}__ss_reg_sw_rd_en),
        .reg_wr_data                            ({{node_name}}_{{record_name}}__ss_reg_sw_wr_data),
        .reg_rd_data                            ({{node_name}}_{{record_name}}__ss_reg_sw_rd_data)
    );
    {%- if ss_info.clear() %}{% endif -%}
{%- else %}
    assign  {{reg_name}}__sw_wr_en = reg_sw_wr_sel[{{reg_idx[0]}}];
    assign  {{reg_name}}__sw_rd_en = reg_sw_rd_sel[{{reg_idx[0]}}];
    assign  {{reg_name}}__sw_wr_data = reg_sw_wr_data;
    assign  reg_sw_rd_data[{{reg_idx[0]}}] = {{reg_name}}__sw_rd_data;
{%- endif %}
{% for field in reg.fields(skip_not_present=False) -%}
    {# IS (interrupt status) bits need to be split to support interrupt type (edge and level) #}
    {%- if reg.type_name == "ERR_MISC0_0" and field.type_name == "IS" %}
    {%- for n in range(field.width) %}{# single bit #}
    field #(
        .F_WIDTH                                (1),
        .ARST_VALUE                             (1'b0),
        .SW_TYPE                                ({{"{"~format_sw_type(field)~"}"}}),
        .SW_ONREAD_TYPE                         ({{"{"~format_onread_type(field)~"}"}}),
        .SW_ONWRITE_TYPE                        ({{"{"~format_onwrite_type(field)~"}"}}),
        .HW_TYPE                                ({{format_hw_type(field)}}),
        .HARD_WIRED                             ({{is_hard_wired(field)}})
    )
    x__{{reg_name}}__{{field.inst_name}}_{{field.high-n}} (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .sync_rst                               (1'b0),
        .sw_wr_data                             ({{reg_name}}__sw_wr_data[{{field.high-n}}]),
        .sw_rd                                  ({{reg_name}}__sw_rd_en),
        .sw_wr                                  ({{reg_name}}__sw_wr_en),
        .swmod_out                              (),
        .swacc_out                              (),
        .hw_value                               ({{reg_name}}__{{field.inst_name}}__next_value[{{field.high-n}}]),
        .hw_pulse                               ({{reg_name}}__{{field.inst_name}}__pulse[{{field.high-n}}]),
        .field_value                            ({{reg_name}}__{{field.inst_name}}__curr_value[{{field.high-n}}])
    );
    {%- endfor %}{# bit loop #}
    {%- else %}
    field #(
        .F_WIDTH                                ({{field.width}}),
        .ARST_VALUE                             ({{"%d'h%x"|format(field.width, get_reset_val(field))}}),
        .SW_TYPE                                ({{"{"~format_sw_type(field)~"}"}}),
        .SW_ONREAD_TYPE                         ({{"{"~format_onread_type(field)~"}"}}),
        .SW_ONWRITE_TYPE                        ({{"{"~format_onwrite_type(field)~"}"}}),
        .HW_TYPE                                ({{format_hw_type(field)}}),
        .HARD_WIRED                             ({{is_hard_wired(field)}})
    )
    x__{{reg_name}}__{{field.inst_name}} (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .sync_rst                               (1'b0),
        .sw_wr_data                             ({{reg_name}}__sw_wr_data[{{field.high}}:{{field.low}}]),
        .sw_rd                                  ({{reg_name}}__sw_rd_en),
        .sw_wr                                  ({{reg_name}}__sw_wr_en),
        .swmod_out                              (),
        .swacc_out                              (),
        .hw_value                               ({% if field.is_hw_writable %}{{reg_name}}__{{field.inst_name}}__next_value
                                                {%- else %}{{field.width}}'b0{% endif %}),
        .hw_pulse                               ({% if field.is_hw_writable and not is_hard_wired(field) -%}
                                                {{reg_name}}__{{field.inst_name}}__pulse
                                                {%- else %}1'b0{% endif %}),
        .field_value                            ({% if field.is_hw_readable or field.is_sw_readable -%}
                                                {{reg_name}}__{{field.inst_name}}__curr_value{% endif %})
    );
    {%- endif -%}
{% endfor %}{# field loop #}
    always_comb begin
        {%- set all_fields = reg.fields(skip_not_present=False)|list %}
        {%- if not (all_fields|length == 1 and all_fields[0].width == reg.size * 8 and all_fields[0].is_sw_readable) %}{# to avoid vc_lint w415a error #}
        {{reg_name}}__sw_rd_data = {{reg.size * 8}}'h0;
        {%- endif %}
        {%- for field in reg.fields(skip_not_present=False) if field.is_sw_readable %}
        {{reg_name}}__sw_rd_data[{{field.high}}:{{field.low}}] = {{reg_name}}__{{field.inst_name}}__curr_value;
        {%- endfor %}{# field loop #}
    end
    {% if reg.type_name == "ERR_FR_0_first" %}
    {%- elif reg.type_name == "ERR_FR_0_otherwise" %}
    {%- elif reg.type_name == "ERR_FR_1" %}
    {%- elif reg.type_name == "ERR_CTRL_0_first" %}
    assign  {{node_name}}__ctrl_fi = {{reg_name}}__FI__curr_value;
    assign  {{node_name}}__ctrl_cfi = {{reg_name}}__CFI__curr_value;
    {%- elif reg.type_name == "ERR_CTRL_0_otherwise" %}
    {%- elif reg.type_name == "ERR_CTRL_1" %}
    {%- elif reg.type_name == "ERR_ADDR_0" %}
    assign  {{reg_name}}__PADDR_31_0__pulse = {{node_name}}_{{record_name}}__pn;
    assign  {{reg_name}}__PADDR_31_0__next_value = {{node_name}}_{{record_name}}__poi_err_addr[31:0];
    {%- elif reg.type_name == "ERR_ADDR_1" %}
    assign  {{reg_name}}__PADDR_55_32__pulse = {{node_name}}_{{record_name}}__pn;
    assign  {{reg_name}}__PADDR_55_32__next_value = {{node_name}}_{{record_name}}__poi_err_addr[55:32];
    {%- elif reg.type_name == "ERR_STATUS_0" %}
    assign  {{reg_name}}__CE__pulse = {{node_name}}_{{record_name}}__plus_f;
    assign  {{reg_name}}__CE__next_value = {{node_name}}_{{record_name}}__plus_f ? 2'b10 : 2'b00;
    assign  {{reg_name}}__SERR__pulse = {{node_name}}_{{record_name}}__or_all_int_flag;

    always_comb begin
        case ({{reg_name}}__SERR__curr_value)
            `SERR_ECC: begin
                {{reg_name}}__SERR__next_value = `SERR_ECC;
            end
            `SERR_IMP_DEF: begin
                if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_ECC & {{node_name}}_{{record_name}}__int_flag) |
                    {{node_name}}_{{record_name}}__of_flag)
                    {{reg_name}}__SERR__next_value = `SERR_ECC;
                else
                    {{reg_name}}__SERR__next_value = `SERR_IMP_DEF;
            end
            `SERR_POIS: begin
                if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_ECC & {{node_name}}_{{record_name}}__int_flag) |
                    {{node_name}}_{{record_name}}__of_flag)
                    {{reg_name}}__SERR__next_value = `SERR_ECC;
                else if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_IMP_DEF & {{node_name}}_{{record_name}}__int_flag))
                    {{reg_name}}__SERR__next_value = `SERR_IMP_DEF;
                else
                    {{reg_name}}__SERR__next_value = `SERR_POIS;
            end
            `SERR_NO_ERR: begin
                if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_ECC & {{node_name}}_{{record_name}}__int_flag) |
                    {{node_name}}_{{record_name}}__of_flag)
                    {{reg_name}}__SERR__next_value = `SERR_ECC;
                else if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_IMP_DEF & {{node_name}}_{{record_name}}__int_flag))
                    {{reg_name}}__SERR__next_value = `SERR_IMP_DEF;
                else if (|({{node_name|upper}}_{{record_name|upper}}_P_IS_POIS & {{node_name}}_{{record_name}}__int_flag))
                    {{reg_name}}__SERR__next_value = `SERR_POIS;
                else
                    {{reg_name}}__SERR__next_value = `SERR_NO_ERR;
            end
            default: begin
                {{reg_name}}__SERR__next_value = `SERR_NO_ERR;
            end
        endcase
    end

    assign  {{reg_name}}__UET__pulse = {{node_name}}_{{record_name}}__or_all_int_flag;
    always_comb begin
        case ({{reg_name}}__UET__curr_value)
            `UET_IS_UEU: begin
                {{reg_name}}__UET__next_value = `UET_IS_UEU;
            end
            `UET_IS_UER: begin
                if (|({{node_name|upper}}_{{record_name|upper}}_P_NOT_IMP_DEF & {{node_name}}_{{record_name}}__int_flag) |
                    {{node_name}}_{{record_name}}__of_flag)
                    {{reg_name}}__UET__next_value = `UET_IS_UEU;
                else
                    {{reg_name}}__UET__next_value = `UET_IS_UER;
            end
            `UET_IS_NOERR: begin
                {{reg_name}}__UET__next_value = `UET_IS_NOERR;
            end
            default: begin
                {{reg_name}}__UET__next_value = `UET_IS_NOERR;
            end
        endcase
    end

    assign  {{node_name}}_{{record_name}}__pn =
        |({{node_name|upper}}_{{record_name|upper}}_P_IS_POIS &
        {{node_name}}_{{record_name}}__int_flag) &
        ~{{reg_name}}__PN__curr_value;
    assign  {{reg_name}}__PN__pulse = {{node_name}}_{{record_name}}__pn;
    assign  {{reg_name}}__PN__next_value = {{reg_name}}__PN__pulse;

    assign  {{reg_name}}__V__pulse = {{reg_name}}__V__next_value;
    assign  {{reg_name}}__V__next_value = {{node_name}}_{{record_name}}__or_all_int_flag;
    assign  err_gsr_s[{{record_cnt[0]}}] = {{reg_name}}__V__curr_value;

    assign  {{reg_name}}__UE__pulse = {{reg_name}}__UE__next_value;
    assign  {{reg_name}}__UE__next_value = {{node_name}}_{{record_name}}__or_all_int_flag;

    assign  {{reg_name}}__OF__pulse = {{reg_name}}__OF__next_value;
    assign  {{reg_name}}__OF__next_value = {{node_name}}_{{record_name}}__of_flag;

    assign  {{reg_name}}__MV__pulse = {{reg_name}}__MV__next_value;
    assign  {{reg_name}}__MV__next_value = {{node_name}}_{{record_name}}__or_all_int_flag;
    {%- elif reg.type_name == "ERR_STATUS_1" %}
    {%- elif reg.type_name == "ERR_MISC0_0" %}
    assign  {{node_name}}_{{record_name}}__int_fault = {{reg_name}}__IS__curr_value;
    always_comb begin
        for (integer i = 0; i < 32; i = i + 1) begin
            {{reg_name}}__IS__next_value[i] =
                (({{node_name}}_{{record_name}}__interrupt[i] & {{node_name}}__ctrl_fi) |
                {{node_name}}_{{record_name}}__fim_int[i]) & {{node_name}}_{{record_name}}__fen[i];
            if ({{node_name|upper}}_{{record_name|upper}}_P_INTR_TYPE[i])
                {{reg_name}}__IS__pulse[i] = {{reg_name}}__IS__next_value[i];
            else
                {{reg_name}}__IS__pulse[i] = 1'b1;
        end
    end
    assign  {{node_name}}_{{record_name}}__int_flag = {{reg_name}}__IS__next_value;
    {%- elif reg.type_name == "ERR_MISC0_1" %}
    assign  {{node_name}}_{{record_name}}__plus_f = {{node_name}}_{{record_name}}__plus & {{node_name}}__ctrl_fi & {{node_name}}__ctrl_cfi;

    always_ff @(posedge {{curr_clk}} or negedge {{curr_async_rst_n}}) begin
        if (~{{curr_async_rst_n}})
            {{node_name}}_{{record_name}}__wd_step_cnt <= 44'h0;
        else if ({{node_name}}_{{record_name}}__wd_step_cnt < { {{reg_name}}__WD_STEP__curr_value, 40'hff_ffff_ffff })
            {{node_name}}_{{record_name}}__wd_step_cnt <= {{node_name}}_{{record_name}}__wd_step_cnt + 44'h1;
        else
            {{node_name}}_{{record_name}}__wd_step_cnt <= 44'h0;
    end
    assign  {{node_name}}_{{record_name}}__wd_step_cnt_of = ({{node_name}}_{{record_name}}__wd_step_cnt == { {{reg_name}}__WD_STEP__curr_value, 40'hff_ffff_ffff });

    always_ff @(posedge {{curr_clk}} or negedge {{curr_async_rst_n}}) begin
        if (~{{curr_async_rst_n}})
            {{node_name}}_{{record_name}}__cec_wd_cnt   <= 8'h0;
        else if ({{node_name}}_{{record_name}}__wd_step_cnt_of)
            {{node_name}}_{{record_name}}__cec_wd_cnt   <= {{node_name}}_{{record_name}}__cec_wd_cnt + 8'h1;
        else
            {{node_name}}_{{record_name}}__cec_wd_cnt   <= 8'h0;
    end
    assign  {{node_name}}_{{record_name}}__cec_wd_cnt_of = ({{node_name}}_{{record_name}}__cec_wd_cnt == {{reg_name}}__CEC_WD__curr_value);

    assign  {{reg_name}}__OF__pulse = {{reg_name}}__OF__next_value;
    assign  {{reg_name}}__OF__next_value = {{node_name}}_{{record_name}}__of_flag;

    assign  {{reg_name}}__CEC__pulse = 1'b1;
    assign  {{node_name}}_{{record_name}}__cec_upd_value = {{node_name}}_{{record_name}}__plus_f ?
        ({{reg_name}}__CEC__curr_value + {{node_name}}_{{record_name}}__plus_value) :
        {1'b0, {{reg_name}}__CEC__curr_value};
    assign  {{node_name}}_{{record_name}}__of_flag = ({{node_name}}_{{record_name}}__cec_upd_value >= (1'b1 << {{reg_name}}__CEC_TH__curr_value));
    assign  {{reg_name}}__CEC__next_value =
            ({{node_name}}_{{record_name}}__of_flag | {{reg_name}}__OF__curr_value | {{node_name}}_{{record_name}}__cec_wd_cnt_of) ?
            7'b0 : {{node_name}}_{{record_name}}__cec_upd_value[6:0];

    assign  {{node_name}}_{{record_name}}__of_fault =
        ({{node_name}}_{{record_name}}__fim_of | {{reg_name}}__OF__curr_value) &
        {{node_name}}__ctrl_cfi;
    {% elif reg.type_name == "ERR_MISC1_0" %}
    assign  {{node_name}}_{{record_name}}__fen = {{reg_name}}__FEN__curr_value;
    {% elif reg.type_name == "ERR_MISC1_1" %}
    assign  {{node_name}}_{{record_name}}__fmask = {{reg_name}}__FMASK__curr_value;
    {% elif reg.type_name == "ERR_MISC2_0" %}
    assign  {{node_name}}_{{record_name}}__fim_int = {{reg_name}}__FIM__curr_value[31:0];
    {% elif reg.type_name == "ERR_MISC2_1" %}
    assign  {{node_name}}_{{record_name}}__fim_of = {{reg_name}}__FIM__curr_value[0];
    {% elif reg.type_name == "ERR_MISC3_0" %}
    {% elif reg.type_name == "ERR_MISC3_1" %}
    assign  {{reg_name}}__POIS_INFO__pulse = {{node_name}}_{{record_name}}__pn;
    assign  {{reg_name}}__POIS_INFO__next_value = {{node_name}}_{{record_name}}__poi_err_info;
    {%- endif %}
{% endfor %}{# reg loop #}
    assign  {{node_name}}_{{record_name}}__or_all_int_flag = |{{node_name}}_{{record_name}}__int_flag;
    assign  {{node_name}}_{{record_name}}__fault = (|{{node_name}}_{{record_name}}__int_fault) | {{node_name}}_{{record_name}}__of_fault;
    assign  {{node_name}}__fault_int_r[{{loop.index0}}] = {{node_name}}_{{record_name}}__fault & ~{{node_name}}_{{record_name}}__fmask;
{%- if record_cnt.append(record_cnt.pop() + 1) %}{% endif %}
{% endfor %}{# record loop #}
    assign  fault_int_n[{{loop.index0}}] =
        (|{{node_name}}__fault_int_r) &
        {{node_name}}__ctrl_fi;
{%- else %}{# if isinstance(node, RegfileNode) #}
    {%- if node.type_name in ("ERR_GSR", "ERR_DEVARCH") %}{% set reg = node %}
    {%- set reg_name = get_rtl_name(reg) %}
    //****************************************************************************//
    // Register: {{get_inst_name(reg)}}
    // Size: {{reg.size}} bytes
    // Address Offset: {{reg.absolute_address - slv_node.absolute_address}}
    //****************************************************************************//
    logic                                       {{reg_name}}__sw_wr_en;
    logic                                       {{reg_name}}__sw_rd_en;
    logic   {{"[%2s:0]"|format(reg.size*8-1)}}  {{" " * 28}}{{reg_name}}__sw_wr_data;
    logic   {{"[%2s:0]"|format(reg.size*8-1)}}  {{" " * 28}}{{reg_name}}__sw_rd_data;
    {%- for field in reg.fields(skip_not_present=False) %}
    {%- if field.is_hw_readable or field.is_sw_readable %}
    logic   {{"[%2s:0]"|format(field.width-1)}} {{" " * 29}}{{reg_name}}__{{field.inst_name}}__curr_value;
    {%- endif %}
    {%- if field.is_hw_writable %}
    logic                                       {{reg_name}}__{{field.inst_name}}__pulse;
    logic   {{"[%2s:0]"|format(field.width-1) ~ " "*30}}{{reg_name}}__{{field.inst_name}}__next_value;
    {%- endif %}
    {%- endfor %}{# field loop #}
    {%- if reg.type_name == "ERR_GSR" %}{% set reg_idx = int_reg_idx[-2] %}
    snapshot_reg #(
        .DATA_WIDTH                             (DATA_WIDTH),
        .REG_WIDTH                              ({{reg.size * 8}})
    )
    {{reg_name}}_snapshot_reg (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .soft_rst                               (soft_rst_i0),
        .snap_wr_en                             (reg_sw_wr_sel[{{reg_idx[1]}}:{{reg_idx[0]}}]),
        .snap_rd_en                             (reg_sw_rd_sel[{{reg_idx[1]}}:{{reg_idx[0]}}]),
        .snap_wr_data                           ({{"{"}}{{reg_idx[1]-reg_idx[0]+1}}{{"{"}}reg_sw_wr_data{{"}}"}}),
        .snap_rd_data                           (reg_sw_rd_data[{{reg_idx[1]}}:{{reg_idx[0]}}]),
        .reg_wr_en                              ({{reg_name}}__sw_wr_en),
        .reg_rd_en                              ({{reg_name}}__sw_rd_en),
        .reg_wr_data                            ({{reg_name}}__sw_wr_data),
        .reg_rd_data                            ({{reg_name}}__sw_rd_data)
    );
    {%- elif reg.type_name == "ERR_DEVARCH" %}{% set reg_idx = int_reg_idx[-1] %}
    assign  {{reg_name}}__sw_wr_en      = reg_sw_wr_sel[{{reg_idx[0]}}];
    assign  {{reg_name}}__sw_rd_en      = reg_sw_rd_sel[{{reg_idx[0]}}];
    assign  {{reg_name}}__sw_wr_data    = reg_sw_wr_data;
    assign  reg_sw_rd_data[{{reg_idx[0]}}]  = {{reg_name}}__sw_rd_data;
    {%- endif %}
    {% for field in reg.fields(skip_not_present=False) %}
    field #(
        .F_WIDTH                                ({{field.width}}),
        .ARST_VALUE                             ({{"%d'h%x"|format(field.width, get_reset_val(field))}}),
        .SW_TYPE                                ({{"{"~format_sw_type(field)~"}"}}),
        .SW_ONREAD_TYPE                         ({{"{"~format_onread_type(field)~"}"}}),
        .SW_ONWRITE_TYPE                        ({{"{"~format_onwrite_type(field)~"}"}}),
        .HW_TYPE                                ({{format_hw_type(field)}}),
        .HARD_WIRED                             ({{is_hard_wired(field)}})
    )
    x__{{reg_name}}__{{field.inst_name}} (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .sync_rst                               (1'b0),
        .sw_wr_data                             ({{reg_name}}__sw_wr_data[{{field.high}}:{{field.low}}]),
        .sw_rd                                  ({{reg_name}}__sw_rd_en),
        .sw_wr                                  ({{reg_name}}__sw_wr_en),
        .swmod_out                              (),
        .swacc_out                              (),
        .hw_value                               ({% if field.is_hw_writable %}{{reg_name}}__{{field.inst_name}}__next_value
                                                {%- else %}{{field.width}}'b0{% endif %}),
        .hw_pulse                               ({% if field.is_hw_writable and not is_hard_wired(field) -%}
                                                {{reg_name}}__{{field.inst_name}}__pulse
                                                {%- else %}1'b0{% endif %}),
        .field_value                            ({% if field.is_hw_readable or field.is_sw_readable -%}
                                                {{reg_name}}__{{field.inst_name}}__curr_value{% endif %})
    );
    {%- if reg.type_name == "ERR_GSR" and field.type_name == "S" %}
    assign  {{reg_name}}__S__next_value = err_gsr_s;
    {%- endif %}
    {%- endfor %}{# field loop #}
    always_comb begin
        {%- set all_fields = reg.fields(skip_not_present=False)|list %}
        {%- if not (all_fields|length == 1 and all_fields[0].width == reg.size * 8 and all_fields[0].is_sw_readable) %}{# to avoid vc_lint w415a error #}
        {{reg_name}}__sw_rd_data = {{reg.size * 8}}'h0;
        {%- endif %}
        {%- for field in all_fields if field.is_sw_readable %}
        {%- if is_hard_wired(field) or (not field.is_hw_writable) %}
        {{reg_name}}__sw_rd_data[{{field.high}}:{{field.low}}] = {{reg_name}}__{{field.inst_name}}__curr_value;
        {%- else %}
        {{reg_name}}__sw_rd_data[{{field.high}}:{{field.low}}] =
            {{reg_name}}__{{field.inst_name}}__pulse ?
            {{reg_name}}__{{field.inst_name}}__next_value :
            {{reg_name}}__{{field.inst_name}}__curr_value;
        {%- endif %}
        {%- endfor %}{# field loop #}
    end
    {%- endif %}
{%- endif %}
{% endfor %}{# node loop #}
    {%- if record_cnt[0] < 56 %}
    assign  err_gsr_s[55:{{record_cnt[0]}}] = {{55-record_cnt[0]}}'h0;
    {%- endif %}
    assign  fault_int = |fault_int_n;

//*************************************READ DATA MUX**************************************************//
    assign  reg_rd_data_mux_din                 = reg_sw_rd_data;
    assign  reg_rd_data_mux_sel                 = reg_sw_rd_sel;
    assign  reg_rd_data_vld                     = reg_rd_data_mux_dout_vld;
    assign  reg_rd_data                         = reg_rd_data_mux_dout;

    split_mux_2d #(
        .WIDTH                                  (DATA_WIDTH),
        .CNT                                    (REG_NUM),
        .GROUP_SIZE                             ({{reg_mux_size(slv_node)}}),
        .SKIP_DFF_0                             ({{skip_reg_mux_dff_0(slv_node)}}),
        .SKIP_DFF_1                             ({{skip_reg_mux_dff_1(slv_node)}})
    )
    reg_rd_data_mux (
        .clk                                    ({{curr_clk}}),
        .rst_n                                  ({{curr_async_rst_n}}),
        .din                                    (reg_rd_data_mux_din),
        .sel                                    (reg_rd_data_mux_sel),
        .dout                                   (reg_rd_data_mux_dout),
        .dout_vld                               (reg_rd_data_mux_dout_vld)
    );
endmodule
`default_nettype wire