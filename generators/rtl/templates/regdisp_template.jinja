`default_nettype none
module {{disp_name}} (
    {%- for child in disp_node.children(unroll=True, skip_not_present=False) %}
    {%- set child_name = get_rtl_name(child) -%}
    {%- if is_mem(child) or is_3rd_party_ip(child) %}
    // {{child_name}} clock and reset domain
    {{child_name}}_clk,
    {{child_name}}_rst_n,
    {%- endif %}
    // reg_native_if forwarding to {{child_name}}
    {{disp_name}}__{{child_name}}__req_vld,
    {{child_name}}__{{disp_name}}__ack_vld,
    {{child_name}}__{{disp_name}}__err,
    {{disp_name}}__{{child_name}}__addr,
    {{disp_name}}__{{child_name}}__wr_en,
    {{disp_name}}__{{child_name}}__rd_en,
    {{disp_name}}__{{child_name}}__wr_data,
    {{child_name}}__{{disp_name}}__rd_data,
    {{disp_name}}__{{child_name}}__non_sec,
    {%- if is_regslv(child) or is_regdisp(child) or is_3rd_party_ip(child) %}
    {{disp_name}}__{{child_name}}__soft_rst,
    {%- endif %}
    {%- if is_mem(child) or is_3rd_party_ip(child) %}
    {{child_name}}__{{disp_name}}__domain_is_non_secure,
    {%- endif %}
    {%- endfor %}
    // regdisp is in register native clock and reset domain
    {{disp_name}}_clk,
    {{disp_name}}_rst_n,
    // reg_native_if forwarded by upstream module
    upstream__{{disp_name}}__req_vld,
    {{disp_name}}__upstream__ack_vld,
    {{disp_name}}__upstream__err,
    upstream__{{disp_name}}__addr,
    upstream__{{disp_name}}__wr_en,
    upstream__{{disp_name}}__rd_en,
    upstream__{{disp_name}}__wr_data,
    {{disp_name}}__upstream__rd_data,
    upstream__{{disp_name}}__non_sec,
    upstream__{{disp_name}}__soft_rst
);
    `include "common_funcs.vh"

    parameter   BASE_ADDR = 64'h{{"%x"|format(disp_node.absolute_address if use_abs_addr(disp_node) else 0)}};
    parameter   UPSTREAM_ADDR_WIDTH = {{get_addr_width(disp_node)}};
    parameter   UPSTREAM_DATA_WIDTH = {{get_data_width(disp_node)}};
    {%- for child in disp_node.children(unroll=True, skip_not_present=False) %}
    {%- set child_name = get_rtl_name(child) %}
    {%- if is_mem(child) or is_3rd_party_ip(child) %}
    parameter   {{child_name|upper}}_SECURE_ACCESS_CHECK = 1;
    {%- endif %}
    parameter   {{child_name|upper}}_ADDR_WIDTH = {{get_addr_width(child)}};
    parameter   {{child_name|upper}}_DATA_WIDTH = {{get_data_width(child)}};
    parameter   {{child_name|upper}}_ADDR_REM_BITS = {{valid_bit(child)}};
    parameter   {{child_name|upper}}_ADDR_TRUNC_BITS = UPSTREAM_ADDR_WIDTH - {{child_name|upper}}_ADDR_REM_BITS;
    {%- endfor %}
    parameter   FORWARD_NUM = {{get_forward_num(disp_node)}};
    parameter   [FORWARD_NUM-1:0]   INSERT_FORWARD_FF = {{"{" ~ use_forward_ff(disp_node)|join(", ") ~ "}"}};
    parameter   INSERT_BACKWARD_FF = {{use_backward_ff(disp_node)}};

    input   logic                               {{disp_name}}_clk;
    input   logic                               {{disp_name}}_rst_n;
    input   logic                               upstream__{{disp_name}}__req_vld;
    output  logic                               {{disp_name}}__upstream__ack_vld;
    output  logic                               {{disp_name}}__upstream__err;
    input   logic   [UPSTREAM_ADDR_WIDTH-1:0]   upstream__{{disp_name}}__addr;
    input   logic                               upstream__{{disp_name}}__wr_en;
    input   logic                               upstream__{{disp_name}}__rd_en;
    input   logic   [UPSTREAM_DATA_WIDTH-1:0]   upstream__{{disp_name}}__wr_data;
    output  logic   [UPSTREAM_DATA_WIDTH-1:0]   {{disp_name}}__upstream__rd_data;
    input   logic                               upstream__{{disp_name}}__non_sec;
    input   logic                               upstream__{{disp_name}}__soft_rst;
    {% for child in disp_node.children(unroll=True, skip_not_present=False) %}
    {%- set child_name = get_rtl_name(child) %}
    {%- if is_mem(child) or is_3rd_party_ip(child) %}
    input   logic                               {{child_name}}_clk;
    input   logic                               {{child_name}}_rst_n;
    {%- endif %}
    output  logic                               {{disp_name}}__{{child_name}}__req_vld;
    input   logic                               {{child_name}}__{{disp_name}}__ack_vld;
    input   logic                               {{child_name}}__{{disp_name}}__err;
    output  logic   [{{child_name|upper}}_ADDR_WIDTH-1:0] {{disp_name}}__{{child_name}}__addr;
    output  logic                               {{disp_name}}__{{child_name}}__wr_en;
    output  logic                               {{disp_name}}__{{child_name}}__rd_en;
    output  logic   [{{child_name|upper}}_DATA_WIDTH-1:0] {{disp_name}}__{{child_name}}__wr_data;
    input   logic   [{{child_name|upper}}_DATA_WIDTH-1:0] {{child_name}}__{{disp_name}}__rd_data;
    output  logic                               {{disp_name}}__{{child_name}}__non_sec;
    {%- if is_regslv(child) or is_regdisp(child) or is_3rd_party_ip(child) %}
    output  logic                               {{disp_name}}__{{child_name}}__soft_rst;
    {%- endif %}
    {%- if is_mem(child) or is_3rd_party_ip(child) %}
    input   logic                               {{child_name}}__{{disp_name}}__domain_is_non_secure;
    {%- endif %}
    {%- endfor %}

    logic   [FORWARD_NUM-1:0]                           downstream_ack_vld;
    logic   [FORWARD_NUM-1:0]                           downstream_err;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_DATA_WIDTH-1:0] downstream_rd_data;
    logic   [FORWARD_NUM-1:0]                           downstream_soft_rst;
    logic   [FORWARD_NUM-1:0]                           downstream_req_vld_ff;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_ADDR_WIDTH-1:0] downstream_addr_ff;
    logic   [FORWARD_NUM-1:0]                           downstream_wr_en_ff;
    logic   [FORWARD_NUM-1:0]                           downstream_rd_en_ff;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_DATA_WIDTH-1:0] downstream_wr_data_ff;
    logic   [FORWARD_NUM-1:0]                           downstream_non_sec_ff;
    logic   [FORWARD_NUM-1:0]                           downstream_soft_rst_ff;
    logic   [FORWARD_NUM-1:0]                           downstream_req_vld_imux;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_ADDR_WIDTH-1:0] downstream_addr_imux;
    logic   [FORWARD_NUM-1:0]                           downstream_wr_en_imux;
    logic   [FORWARD_NUM-1:0]                           downstream_rd_en_imux;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_DATA_WIDTH-1:0] downstream_wr_data_imux;
    logic   [FORWARD_NUM-1:0]                           downstream_non_sec_imux;
    logic   [FORWARD_NUM-1:0]                           downstream_soft_rst_imux;
    logic   [FORWARD_NUM-1:0] [UPSTREAM_ADDR_WIDTH-1:0] downstream_addr_conv;
    logic                                               {{disp_name}}__upstream__ack_vld_mux;
    logic                                               {{disp_name}}__upstream__err_mux;
    logic   [UPSTREAM_DATA_WIDTH-1:0]                   {{disp_name}}__upstream__rd_data_mux;
    logic   [FORWARD_NUM-1:0]                           dec_if_sel;
    logic                                               dec_dummy_reg_sel;
    logic                                               dummy_reg_ack_vld;

//**************************************FORWARD DATAPATH***********************************************//
    // decode upstream absolute address
    localparam  DEC_ADDR_TRUNC_BITS = log2(UPSTREAM_DATA_WIDTH / 8);
    localparam  DEC_ADDR_REM_BITS = UPSTREAM_ADDR_WIDTH - DEC_ADDR_TRUNC_BITS;

    always_comb begin
        dec_if_sel          = {FORWARD_NUM{1'b0}};
        dec_dummy_reg_sel   = 1'b0;

        if (upstream__{{disp_name}}__req_vld) begin
            unique case (1'b1)
            {%- for child in disp_node.children(unroll=True, skip_not_present=False) %}
                ((DEC_ADDR_REM_BITS'((64'h{{"%x"|format(child.address_offset)}} + BASE_ADDR) >> DEC_ADDR_TRUNC_BITS))
                <= upstream__{{disp_name}}__addr[UPSTREAM_ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] &&
                upstream__{{disp_name}}__addr[UPSTREAM_ADDR_WIDTH-1:DEC_ADDR_TRUNC_BITS] <
                (DEC_ADDR_REM_BITS'((64'h{{"%x"|format(child.address_offset+child.size)}} + BASE_ADDR) >> DEC_ADDR_TRUNC_BITS))):
                    dec_if_sel[{{loop.index0}}] = 1'b1;
            {%- endfor %}
                default: dec_dummy_reg_sel  = 1'b1;
            endcase
        end
    end

    // forward inverse multiplexor for req_vld, addr, wr_en, rd_en, wr_data
    always_comb begin
        for (integer i = 0; i < FORWARD_NUM; i = i + 1) begin
            downstream_req_vld_imux[i]      = 1'b0;
            downstream_addr_imux[i]         = {UPSTREAM_ADDR_WIDTH{1'b0}};
            downstream_wr_en_imux[i]        = 1'b0;
            downstream_rd_en_imux[i]        = 1'b0;
            downstream_wr_data_imux[i]      = {UPSTREAM_DATA_WIDTH{1'b0}};
            downstream_non_sec_imux[i]      = 1'b0;
            downstream_soft_rst_imux[i]     = upstream__{{disp_name}}__soft_rst;

            if (dec_if_sel[i]) begin
                downstream_req_vld_imux[i]  = upstream__{{disp_name}}__req_vld;
                downstream_addr_imux[i]     = upstream__{{disp_name}}__addr;
                downstream_wr_en_imux[i]    = upstream__{{disp_name}}__wr_en;
                downstream_rd_en_imux[i]    = upstream__{{disp_name}}__rd_en;
                downstream_wr_data_imux[i]  = upstream__{{disp_name}}__wr_data;
                downstream_non_sec_imux[i]  = upstream__{{disp_name}}__non_sec;
            end
        end
    end
{#  generate address offset and forward other signals
        regdisp: absolute address (forced)
        regslv: address offset (forced)
        3rd party IP: generate absolute address (default)
        memory interface: address offset (default)
    there are two methods to convert absolute address to offset,
    which depends on the base address alignment:
        1. base_addr = N * pow(2, ceil(log2(total_size))):
             simply set several higher bits to 0 by slicing
        2. otherwise:
             subtract base address from absolute address by generating a subtractor #}
    // address conversion
    {%- for child in disp_node.children(unroll=True, skip_not_present=False) %}
    {%- if use_abs_addr(child) %}
    assign  downstream_addr_conv[{{loop.index0}}] = downstream_addr_imux[{{loop.index0}}];
    {%- elif is_aligned(child) %}
    assign  downstream_addr_conv[{{loop.index0}}] = {{"{{"}}{{get_rtl_name(child)|upper}}_ADDR_TRUNC_BITS{{"{"}}1'b0{{"}}"}}, downstream_addr_imux[{{loop.index0}}][{{get_rtl_name(child)|upper}}_ADDR_REM_BITS-1:0]{{"}"}};
    {%- else %}
    assign  downstream_addr_conv[{{loop.index0}}] = downstream_addr_imux[{{loop.index0}}] - UPSTREAM_ADDR_WIDTH'('h{{"%x"|format(child.absolute_address if use_abs_addr(disp_node) else child.address_offset)}});
    {%- endif %}
    {%- endfor %}

    // optionally insert forwarding flip-flops,
    // which depends on hj_use_forward_ff in child addrmaps
    genvar cnt;
    generate
        for (cnt = 0; cnt < FORWARD_NUM; cnt = cnt + 1) begin: g_forward_ff_out
            if (INSERT_FORWARD_FF[cnt]) begin: g_forward_ff_in
                always @(posedge {{disp_name}}_clk or negedge {{disp_name}}_rst_n) begin
                    if (!{{disp_name}}_rst_n) begin
                        downstream_req_vld_ff[cnt]      <= 1'b0;
                        downstream_addr_ff[cnt]         <= {UPSTREAM_ADDR_WIDTH{1'b0}};
                        downstream_wr_en_ff[cnt]        <= 1'b0;
                        downstream_rd_en_ff[cnt]        <= 1'b0;
                        downstream_wr_data_ff[cnt]      <= {UPSTREAM_DATA_WIDTH{1'b0}};
                        downstream_non_sec_ff[cnt]      <= 1'b0;
                        downstream_soft_rst_ff[cnt]     <= 1'b0;
                    end
                    else begin
                        downstream_req_vld_ff[cnt]      <= downstream_req_vld_imux[cnt];
                        downstream_addr_ff[cnt]         <= downstream_addr_conv[cnt];
                        downstream_wr_en_ff[cnt]        <= downstream_wr_en_imux[cnt];
                        downstream_rd_en_ff[cnt]        <= downstream_rd_en_imux[cnt];
                        downstream_wr_data_ff[cnt]      <= downstream_wr_data_imux[cnt];
                        downstream_non_sec_ff[cnt]      <= downstream_non_sec_imux[cnt];
                        downstream_soft_rst_ff[cnt]     <= downstream_soft_rst_imux[cnt];
                    end
                end
            end
            else begin: g_no_forward_ff_in
                assign downstream_req_vld_ff[cnt]       = downstream_req_vld_imux[cnt];
                assign downstream_addr_ff[cnt]          = downstream_addr_conv[cnt];
                assign downstream_wr_en_ff[cnt]         = downstream_wr_en_imux[cnt];
                assign downstream_rd_en_ff[cnt]         = downstream_rd_en_imux[cnt];
                assign downstream_wr_data_ff[cnt]       = downstream_wr_data_imux[cnt];
                assign downstream_non_sec_ff[cnt]       = downstream_non_sec_imux[cnt];
                assign downstream_soft_rst_ff[cnt]      = downstream_soft_rst_imux[cnt];
            end
        end
    endgenerate
{% for child in disp_node.children(unroll=True, skip_not_present=False) %}
    {%- set child_name = get_rtl_name(child) %}
    {%- if is_mem(child) %}
    reg_native_if2mem #(
        .CDC_ENABLE({{has_cdc(child)}}),
        .BUS_DATA_WIDTH(UPSTREAM_DATA_WIDTH),
        .BUS_ADDR_WIDTH({{child_name|upper}}_ADDR_REM_BITS),
        .MEM_DATA_WIDTH({{child_name|upper}}_DATA_WIDTH),
        .MEM_ADDR_WIDTH({{child_name|upper}}_ADDR_WIDTH),
        .SECURE_ACCESS_CHECK({{child_name|upper}}_SECURE_ACCESS_CHECK)
    )
    reg_native_if2mem__{{disp_name}}2{{child_name}} (
        .native_clk({{disp_name}}_clk),
        .native_rst_n({{disp_name}}_rst_n),
        .soft_rst(downstream_soft_rst_ff[{{loop.index0}}]),
        .req_vld(downstream_req_vld_ff[{{loop.index0}}]),
        .ack_vld(downstream_ack_vld[{{loop.index0}}]),
        .err(downstream_err[{{loop.index0}}]),
        .addr(downstream_addr_ff[{{loop.index0}}][{{valid_bit(child)-1}}:0]),
        .wr_en(downstream_wr_en_ff[{{loop.index0}}]),
        .rd_en(downstream_rd_en_ff[{{loop.index0}}]),
        .wr_data(downstream_wr_data_ff[{{loop.index0}}]),
        .rd_data(downstream_rd_data[{{loop.index0}}]),
        .non_sec(downstream_non_sec_ff[{{loop.index0}}]),
        .mem_clk({{child_name}}_clk),
        .mem_rst_n({{child_name}}_rst_n),
        .mem_req_vld({{disp_name}}__{{child_name}}__req_vld),
        .mem_ack_vld({{child_name}}__{{disp_name}}__ack_vld),
        .mem_err({{child_name}}__{{disp_name}}__err),
        .mem_addr({{disp_name}}__{{child_name}}__addr),
        .mem_wr_en({{disp_name}}__{{child_name}}__wr_en),
        .mem_rd_en({{disp_name}}__{{child_name}}__rd_en),
        .mem_wr_data({{disp_name}}__{{child_name}}__wr_data),
        .mem_rd_data({{child_name}}__{{disp_name}}__rd_data),
        .domain_is_non_secure({{child_name}}__{{disp_name}}__domain_is_non_secure),
        .error_report_en(1'b1)
    );
    {%- elif is_3rd_party_ip(child) %}
    reg_native_if_1to1 #(
        .CDC_ENABLE({{has_cdc(child)}}),
        .BUS_DATA_WIDTH(UPSTREAM_DATA_WIDTH),
        .BUS_ADDR_WIDTH(UPSTREAM_ADDR_WIDTH),
        .SECURE_ACCESS_CHECK({{child_name|upper}}_SECURE_ACCESS_CHECK)
    )
    reg_native_if_1to1__{{disp_name}}2{{child_name}} (
        .native_clk({{disp_name}}_clk),
        .native_rst_n({{disp_name}}_rst_n),
        .soft_rst(downstream_soft_rst_ff[{{loop.index0}}]),
        .req_vld(downstream_req_vld_ff[{{loop.index0}}]),
        .ack_vld(downstream_ack_vld[{{loop.index0}}]),
        .err(downstream_err[{{loop.index0}}]),
        .addr(downstream_addr_ff[{{loop.index0}}]),
        .wr_en(downstream_wr_en_ff[{{loop.index0}}]),
        .rd_en(downstream_rd_en_ff[{{loop.index0}}]),
        .wr_data(downstream_wr_data_ff[{{loop.index0}}]),
        .rd_data(downstream_rd_data[{{loop.index0}}]),
        .non_sec(downstream_non_sec_ff[{{loop.index0}}]),
        .ext_clk({{child_name}}_clk),
        .ext_rst_n({{child_name}}_rst_n),
        .ext_soft_rst({{disp_name}}__{{child_name}}__soft_rst),
        .ext_req_vld({{disp_name}}__{{child_name}}__req_vld),
        .ext_ack_vld({{child_name}}__{{disp_name}}__ack_vld),
        .ext_err({{child_name}}__{{disp_name}}__err),
        .ext_addr({{disp_name}}__{{child_name}}__addr),
        .ext_wr_en({{disp_name}}__{{child_name}}__wr_en),
        .ext_rd_en({{disp_name}}__{{child_name}}__rd_en),
        .ext_wr_data({{disp_name}}__{{child_name}}__wr_data),
        .ext_rd_data({{child_name}}__{{disp_name}}__rd_data),
        .ext_non_sec({{disp_name}}__{{child_name}}__non_sec),
        .domain_is_non_secure({{child_name}}__{{disp_name}}__domain_is_non_secure),
        .error_report_en(1'b1)
    );
    {%- elif is_regdisp(child) or is_regslv(child) %}
    assign  {{disp_name}}__{{child_name}}__req_vld      = downstream_req_vld_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__addr         = downstream_addr_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__wr_en        = downstream_wr_en_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__rd_en        = downstream_rd_en_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__wr_data      = downstream_wr_data_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__non_sec      = downstream_non_sec_ff[{{loop.index0}}];
    assign  {{disp_name}}__{{child_name}}__soft_rst     = downstream_soft_rst_ff[{{loop.index0}}];
    assign  downstream_ack_vld[{{loop.index0}}]     = {{child_name}}__{{disp_name}}__ack_vld;
    assign  downstream_err[{{loop.index0}}]         = {{child_name}}__{{disp_name}}__err;
    assign  downstream_rd_data[{{loop.index0}}]     = {{child_name}}__{{disp_name}}__rd_data;
    {%- endif %}
{% endfor %}
//**************************************BACKWARD DATAPATH**********************************************//
    // backward multiplexor for rd_data, ack_vld and err
    always_ff @(posedge {{disp_name}}_clk or negedge {{disp_name}}_rst_n) begin
        if (!{{disp_name}}_rst_n)
            dummy_reg_ack_vld   <= 1'b0;
        else
            dummy_reg_ack_vld   <= dec_dummy_reg_sel;
    end
    assign  {{disp_name}}__upstream__ack_vld_mux = (| downstream_ack_vld) | dummy_reg_ack_vld;
    assign  {{disp_name}}__upstream__err_mux = | downstream_err;

    always_comb begin
        {{disp_name}}__upstream__rd_data_mux = {UPSTREAM_DATA_WIDTH{1'b0}};
        if (!dummy_reg_ack_vld) begin
            for (integer i = 0; i < FORWARD_NUM; i = i + 1) begin
                if (downstream_ack_vld[i]) begin
                    {{disp_name}}__upstream__rd_data_mux = downstream_rd_data[i];
                end
            end
        end
    end

    // optionally insert backward flip-flops after data passes through mux
    generate
        if (INSERT_BACKWARD_FF) begin: g_backward_ff
            always_ff @(posedge {{disp_name}}_clk or negedge {{disp_name}}_rst_n) begin
                if (!{{disp_name}}_rst_n) begin
                    {{disp_name}}__upstream__ack_vld    <= 1'b0;
                    {{disp_name}}__upstream__err        <= 1'b0;
                    {{disp_name}}__upstream__rd_data    <= {UPSTREAM_DATA_WIDTH{1'b0}};
                end
                else begin
                    {{disp_name}}__upstream__ack_vld    <= {{disp_name}}__upstream__ack_vld_mux;
                    {{disp_name}}__upstream__err        <= {{disp_name}}__upstream__err_mux;
                    {{disp_name}}__upstream__rd_data    <= {{disp_name}}__upstream__rd_data_mux;
                end
            end
        end
        else begin: g_wo_backward_ff
            assign  {{disp_name}}__upstream__ack_vld    = {{disp_name}}__upstream__ack_vld_mux;
            assign  {{disp_name}}__upstream__err        = {{disp_name}}__upstream__err_mux;
            assign  {{disp_name}}__upstream__rd_data    = {{disp_name}}__upstream__rd_data_mux;
        end
    endgenerate
endmodule
`default_nettype wire