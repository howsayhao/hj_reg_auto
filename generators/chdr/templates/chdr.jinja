/*
 * {{get_inst_name(node)|upper}} Header - Generated by HRDA
 */
#include <stdint.h>
#ifndef {{get_inst_name(node)|upper}}_H
#define {{get_inst_name(node)|upper}}_H
{# define base address of current module #}
#define {{"%-40s%8s%s"|format(get_inst_name(node)+"_BASE", "", get_base_addr(node))|upper}}

{# define absolute address of all internal registers #}
{%- for child in node.descendants(unroll=True, skip_not_present=False, in_post_order=True) -%}
{% if isinstance(child, RegNode) -%}
#define {{"%-40s%8s%s_BASE + %s"|format(get_hier_name(child), "", get_inst_name(node), get_addr_offset(child))|upper}}
{% endif %}
{%- endfor -%}

{%- macro reg_typedef(reg) %}
typedef union {{"{"}}
    uint{{reg.size * 8}}_t val;
    struct {{"{"}}
    {%- for field in get_all_fields(reg) %}
        {{"uint%s_t %-12s: %d;"|format(reg.size * 8, field[0], field[1])}}
    {%- endfor %}
    {{"}"}} reg;
{{"}"}} {{get_hier_name(reg)}}_t;
{%- endmacro -%}

{# define absolute address of all internal registers #}
{% for child in node.descendants(unroll=True, skip_not_present=False, in_post_order=True) -%}
{%- if isinstance(child, RegNode) -%}
{{reg_typedef(child)}}
{% endif -%}
{%- endfor %}
#endif /* {{get_inst_name(node)}}_H */